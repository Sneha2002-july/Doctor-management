import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;

public class DoctorBrowserPage {
    private JFrame frame;
    private JTextField searchField;
    private JTable doctorTable;
    private DefaultTableModel tableModel;
    private List<Doctor> doctorList;

    public DoctorBrowserPage(List<Doctor> doctors) {
        this.doctorList = doctors;

        // Frame setup
        frame = new JFrame("Doctor Browser");
        frame.setSize(800, 600);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        // Search Panel
        JPanel searchPanel = new JPanel(new BorderLayout(5, 5));
        searchPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

        JLabel searchLabel = new JLabel("Search: ");
        searchLabel.setFont(new Font("Arial", Font.BOLD, 14));

        searchField = new JTextField();
        searchField.setFont(new Font("Arial", Font.PLAIN, 14));
        searchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                filterTable(searchField.getText());
            }
        });

        searchPanel.add(searchLabel, BorderLayout.WEST);
        searchPanel.add(searchField, BorderLayout.CENTER);

        // Doctor Table
        String[] columnNames = {"Name", "Specialization", "Contact", "Working Hours"};
        tableModel = new DefaultTableModel(columnNames, 0);
        doctorTable = new JTable(tableModel);

        doctorTable.setFont(new Font("Arial", Font.PLAIN, 14));
        doctorTable.setRowHeight(25);
        doctorTable.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));
        doctorTable.getTableHeader().setBackground(new Color(70, 130, 180));
        doctorTable.getTableHeader().setForeground(Color.WHITE);

        JScrollPane scrollPane = new JScrollPane(doctorTable);

        // Add Components
        frame.add(searchPanel, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);

        populateTable(); // Populate the table initially

        frame.setVisible(true);
    }

    private void populateTable() {
        tableModel.setRowCount(0); // Clear table
        for (Doctor doctor : doctorList) {
            tableModel.addRow(new Object[]{
                    doctor.getName(),
                    doctor.getSpecialization(),
                    doctor.getContact(),
                    doctor.getStartTime() + " - " + doctor.getEndTime()
            });
        }
    }

    private void filterTable(String query) {
        tableModel.setRowCount(0); // Clear table
        for (Doctor doctor : doctorList) {
            if (doctor.getName().toLowerCase().contains(query.toLowerCase())
                    || doctor.getSpecialization().toLowerCase().contains(query.toLowerCase())) {
                tableModel.addRow(new Object[]{
                        doctor.getName(),
                        doctor.getSpecialization(),
                        doctor.getContact(),
                        doctor.getStartTime() + " - " + doctor.getEndTime()
                });
            }
        }
    }
}
